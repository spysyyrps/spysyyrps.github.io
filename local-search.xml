<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基础爬虫流程</title>
    <link href="/%E5%9F%BA%E7%A1%80%E7%88%AC%E8%99%AB%E6%B5%81%E7%A8%8B/"/>
    <url>/%E5%9F%BA%E7%A1%80%E7%88%AC%E8%99%AB%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="基本-package"><a href="#基本-package" class="headerlink" title="基本 package"></a>基本 package</h2><ul><li><strong>urllib</strong>      python自带的package，可以实现基本的网页内容获取</li><li><strong>requests</strong>   主要实现各种访问请求</li><li><strong>bs4</strong>    主要用到其中的 <em>BeautifulSoup</em> 类来实现对内容的提取</li><li><strong>re</strong>      使用正则表达式来实现对内容的提取</li><li><strong>jieba</strong>    可以配合停用词表实现对文中字词的频次进行统计</li><li><strong>lxml</strong>    可以在 <em>BeautifulSoup</em> 中使用作为html解析器，速度要比bs自带的要快。也可以使用其中的etree实现定位，解析，提取</li></ul><h2 id="基础爬虫的结构与过程"><a href="#基础爬虫的结构与过程" class="headerlink" title="基础爬虫的结构与过程"></a>基础爬虫的结构与过程</h2><h3 id="基础爬虫的基本流程"><a href="#基础爬虫的基本流程" class="headerlink" title="基础爬虫的基本流程"></a>基础爬虫的基本流程</h3><ol><li>确定url或其列表</li><li>确定请求头hearders</li><li>使用 <strong>urllib</strong>, <strong>requests</strong> 等实现对网页中html文件的获取</li><li>使用 <strong>BeautifulSoup</strong>, <strong>re</strong> 等实现对目标内容的提取</li><li>清洗，整理，存储</li></ol><h3 id="基础爬虫的代码大纲"><a href="#基础爬虫的代码大纲" class="headerlink" title="基础爬虫的代码大纲"></a>基础爬虫的代码大纲</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupurl <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span><span class="token comment"># 单个url地址的查询</span><span class="token comment">#urls = ['https://www.taobao.com/?start=&#123;&#125;'.format(str (i)) for i in range(0, 100, 10)]</span><span class="token comment"># url列表</span>request_headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0'</span><span class="token punctuation">,</span>                   <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://movie.douban.com'</span><span class="token punctuation">,</span>                    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token comment"># 请求头可以在网页中使用检查（开发者工具），在网络一栏可获取自己的请求头</span><span class="token comment"># 也可以访问https://www.useragentstring.com/pages/useragentstring.php获取各浏览器的请求头</span><span class="token keyword">def</span> <span class="token function">getHtmlText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>request_headers<span class="token punctuation">)</span>        <span class="token comment">#获取响应</span>        <span class="token keyword">if</span> resp<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>html_txt <span class="token operator">=</span> resp<span class="token punctuation">.</span>text                soup_doc <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_txt<span class="token punctuation">)</span>                <span class="token comment"># 解析</span>                                a <span class="token operator">=</span> soup_doc<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>                <span class="token comment"># 定位</span>                                <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment"># 提取 输出</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    getHtmlText<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="爬虫进阶"><a href="#爬虫进阶" class="headerlink" title="爬虫进阶"></a>爬虫进阶</h2><ul><li><strong>bs4</strong> ，<strong>re</strong> 等解析，定位，提取的工具的使用</li><li>反反爬技术<ul><li>ip代理（如果买要买socked）</li><li>user-agent 池</li><li>selenium, pyppeteer模拟浏览器</li><li>其他</li></ul></li></ul><ul><li><strong>requests-html</strong> (需要更改源码解决中文渲染乱码问题),将动态页面转变为静态</li><li>模拟浏览器也可以实现爬取动态网页</li><li>利用 <strong>Scrapy</strong> 等爬虫框架进行更加系统的开发管理</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python制作CLI基础_1</title>
    <link href="/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9CCLI%E5%9F%BA%E7%A1%80_1/"/>
    <url>/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9CCLI%E5%9F%BA%E7%A1%80_1/</url>
    
    <content type="html"><![CDATA[<p>主要学习使用python制作CLI两个主要方面的内容：</p><ol><li>利用toml文件打包python项目 </li><li>python中的命令行参数解析 <strong>（本篇内容）</strong></li></ol><p>&nbsp;</p><p>本文主要介绍三种较为流行的命令行解析方式，分别为：</p><ul><li><code>sys.argv</code></li><li><code>argparse</code></li><li><code>click</code></li></ul><p>三者各有优劣且已经能够满足绝大部分人的需要</p><p>以下内容均假设python项目已经被打包为名为 <strong>mycli</strong> 的命令行</p><p>&nbsp;</p><h2 id="一、sys-argv"><a href="#一、sys-argv" class="headerlink" title="一、sys.argv"></a>一、sys.argv</h2><p><strong>sys</strong> 库是python自带的一个库，不需要额外安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sysargs <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Argument List:"</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在上述代码的前提下，假设我们在终端输入是</p><p><code>mycli input.txt -o test.txt --verbose</code> </p><p>代码的输出结果即为</p><p><code>[&quot;mycli&quot;, &quot;input.txt&quot;, &quot;-o&quot;, &quot;test.txt&quot;, &quot;--verbose&quot;]</code></p><p><strong>sys.argv</strong> 即为获取终端命令行的全部输入并且采用 <code>split</code> 使用空格分割为list</p><p>&nbsp;</p><p><strong>优点：</strong> </p><ul><li>简洁方便，不需要太多代码即可解析获取参数</li><li>不用额外安装</li></ul><p><strong>缺点：</strong></p><ul><li>参数以list形式解析获取，代码后续处理会较为复杂，需要重新挑选类型检查等</li><li>返回的每个元素固定是 <strong>str</strong> ，可能需要强制类型转换</li><li>功能较少，没有默认值设置等能力</li></ul><p>&nbsp;</p><h2 id="二、argparse"><a href="#二、argparse" class="headerlink" title="二、argparse"></a>二、argparse</h2><p><code>argparse</code> 是十分实用且流行的用于解析命令行参数的包</p><p>它的功能十分强大，可以设置默认值也可以进行类型转化与判断</p><p>同时，利用它，还可以实现 <code>git clone</code> 一样的子命令的功能</p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 1. 创建解析器对象，设置描述信息</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"示例：演示 argparse 的常用功能"</span><span class="token punctuation">,</span>        epilog<span class="token operator">=</span><span class="token string">"更多用法请参考官方文档: https://docs.python.org/3/library/argparse.html"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 2. 添加通用参数 ---------------------------------------------</span>        <span class="token comment"># 位置参数（必须提供的参数）</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"filename"</span><span class="token punctuation">,</span>  <span class="token comment"># 参数名称（位置参数不需要前缀）</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>    <span class="token comment"># 参数类型</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"输入文件的路径"</span>  <span class="token comment"># 帮助信息</span>    <span class="token punctuation">)</span>    <span class="token comment"># 可选参数（短选项和长选项）</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--verbose"</span><span class="token punctuation">,</span>  <span class="token comment"># 短选项和长选项,如果两者同时存在，默认情况下后续使用长选项即verbose访问</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>  <span class="token comment"># 存储为布尔值（存在则为 True，不存在则为 False）</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"启用详细输出模式"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 带类型的参数 + 默认值</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--num"</span><span class="token punctuation">,</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span>        default<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        choices<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 限制取值范围</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"指定一个数字 (默认: %(default)s)"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 互斥参数组（不能同时使用的参数）</span>    group <span class="token operator">=</span> parser<span class="token punctuation">.</span>add_mutually_exclusive_group<span class="token punctuation">(</span><span class="token punctuation">)</span>    group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--start"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"启动服务"</span>    <span class="token punctuation">)</span>    group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--stop"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"停止服务"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 多值参数（接受多个值）</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--values"</span><span class="token punctuation">,</span>        nargs<span class="token operator">=</span><span class="token string">"+"</span><span class="token punctuation">,</span>  <span class="token comment"># 接受至少一个值</span>        <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"传入多个浮点数（例如 1.1 2.2 3.3）"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 版本参数（固定格式）</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"-V"</span><span class="token punctuation">,</span> <span class="token string">"--version"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"version"</span><span class="token punctuation">,</span>        version<span class="token operator">=</span><span class="token string">"%(prog)s 1.0"</span>     <span class="token punctuation">)</span>    <span class="token comment"># 3. 添加子命令 ---------------------------------------------</span>    subparsers <span class="token operator">=</span> parser<span class="token punctuation">.</span>add_subparsers<span class="token punctuation">(</span>        title<span class="token operator">=</span><span class="token string">"子命令"</span><span class="token punctuation">,</span>  <span class="token comment"># 子命令标题</span>        dest<span class="token operator">=</span><span class="token string">"command"</span><span class="token punctuation">,</span>  <span class="token comment"># 存储子命令名称的属性</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"可用子命令"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 子命令 1: process</span>    parser_process <span class="token operator">=</span> subparsers<span class="token punctuation">.</span>add_parser<span class="token punctuation">(</span>        <span class="token string">"process"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"处理文件"</span>    <span class="token punctuation">)</span>    parser_process<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--output"</span><span class="token punctuation">,</span>        required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 必选参数</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"输出文件路径"</span>    <span class="token punctuation">)</span>    parser_process<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--force"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"覆盖已存在的文件"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 子命令 2: clean</span>    parser_clean <span class="token operator">=</span> subparsers<span class="token punctuation">.</span>add_parser<span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"清理文件"</span>    <span class="token punctuation">)</span>    parser_clean<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--recursive"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"递归清理子目录"</span>    <span class="token punctuation">)</span>    parser_clean<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"--dry-run"</span><span class="token punctuation">,</span>        action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span>        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">"模拟运行（不实际删除）"</span>    <span class="token punctuation">)</span>    <span class="token comment"># 4. 解析参数并处理结果 --------------------------------------</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#默认获取sys.argv[1:]进行处理</span>    <span class="token comment"># 打印所有参数（演示用）</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n解析后的参数:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">vars</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span><span class="token format-spec">>10</span><span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 示例逻辑分支</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>command <span class="token operator">==</span> <span class="token string">"process"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\n处理文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">&#125;</span></span><span class="token string"> -> </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>output<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>force<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"警告：已启用强制覆盖模式"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> args<span class="token punctuation">.</span>command <span class="token operator">==</span> <span class="token string">"clean"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\n清理文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>recursive<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"递归清理子目录"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上样例代码包含了 <code>argparse</code> 比较常用的各种参数情形</p><p>并且，当你输入 <code>--help</code> 或者 <code>-h</code> 时，它还会自动根据 <strong>help</strong> 的相关内容生成帮助文档显示在终端</p><p>从上述代码可以看出，<code>argparse</code> 功能十分强大，已经基本满足了开发者的需求</p><p><code>argparse</code> 解析参数的步骤也十分清晰</p><ol><li>使用 <code>argparse.ArgumentParser</code> 创建解析器</li><li>利用 <code>add_argument</code> , <code>add_subparsers</code> ,<code>add_parser</code> 等命令对解析器进行添加参数，子命令集合，子命令等操作</li><li>解析器调用 <code>parser_args</code> 进行解析</li><li>解析结果通过与之前添加的参数名字一一对应进行调用</li></ol><p>&nbsp;</p><p><strong>优点：</strong></p><ul><li>自带，无需额外下载</li><li>功能强大，逻辑清晰</li></ul><p><strong>缺点：</strong></p><ul><li>对于嵌套命令实现还是比较混乱与复杂</li></ul><p>&nbsp;</p><h2 id="三、click"><a href="#三、click" class="headerlink" title="三、click"></a>三、<a href="https://click.palletsprojects.com/en/stable/#documentation">click</a></h2><p>其实 <code>argparse</code> 已经是满足绝大部分人的需求了，代码方面也并不复杂。</p><p>而 <code>click</code> 则是更加强大的用于制作命令行的工具，它不仅通过装饰器使得代码更加易懂，还支持彩色输出，prompt，文件类型检查等其他功能。</p><p>但与此同时，更强大的功能也就带来了更加昂贵的学习成本，所幸 <code>click</code> 的官方文档十分条理清晰，<strong>下文只是极其简单的小引子，更多功能学习请参考官方文档</strong>。</p><blockquote><p>与前两者不同，click 是第三方库因此使用前需要pip install安装</p></blockquote><h3 id="1-无参数命令"><a href="#1-无参数命令" class="headerlink" title="1.无参数命令"></a>1.无参数命令</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span> <span class="token comment">#echo函数效果等同于print,但是对环境更加包容且更加健壮</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时当我们调用 <code>mycli</code> ，假设设置程序入口为 <code>hello()</code> </p><p>终端应该输出 <code>Hello World！</code></p><h3 id="2-嵌套命令"><a href="#2-嵌套命令" class="headerlink" title="2.嵌套命令"></a>2.嵌套命令</h3><h4 id="2-1-采用add-command与自定义子命令名称"><a href="#2-1-采用add-command与自定义子命令名称" class="headerlink" title="2.1 采用add_command与自定义子命令名称"></a>2.1 采用add_command与自定义子命令名称</h4><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">"Welcome!"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">initDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Initialized the database'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"drop"</span><span class="token punctuation">)</span> <span class="token comment">#通过name指定子命令为drop,默认情况下为全部小写的函数名</span><span class="token keyword">def</span> <span class="token function">dropdb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">'Dropped the database'</span><span class="token punctuation">)</span>cli<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>initdb<span class="token punctuation">)</span>cli<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>dropdb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此时当我们调用 <code>mycli</code> ，假设程序入口为 <code>cli()</code> </p><table><thead><tr><th>终端输入</th><th>终端输出</th></tr></thead><tbody><tr><td>mycli</td><td>click自动生成的help界面</td></tr><tr><td>mycli initdb</td><td>Welcome！<br />Initialized the database</td></tr><tr><td>mycli drop</td><td>Welcome！<br />Dropped the database</td></tr></tbody></table><p>在此情况下，可以先写子命令的实现函数再指定父命令入口，即 <code>initDb</code> 或者 <code>dropdb</code> 函数可以定义在 <code>cli</code> 函数之前</p><h4 id="2-2-不使用add-command与激活父命令"><a href="#2-2-不使用add-command与激活父命令" class="headerlink" title="2.2 不使用add_command与激活父命令"></a>2.2 不使用add_command与激活父命令</h4><p>在 2.1 的代码情况下，我们发现只输入 <code>mycli</code> 是只会显示help界面，哪怕里面有逻辑操作</p><p>这是 <strong>click</strong> 的默认设置，但有时我们也希望只输入父命令时进行一些操作，我们可以通过设置 <strong>invoke_without_command&#x3D;True</strong> </p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>group</span><span class="token punctuation">(</span>invoke_without_command<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 在此设置下父命令单独输入也会执行该函数内容</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>pass_context</span><span class="token keyword">def</span> <span class="token function">mycli</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Main command."""</span>    <span class="token comment"># 判断是否跟着子命令</span>    <span class="token keyword">if</span> ctx<span class="token punctuation">.</span>invoked_subcommand <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">"Running default behavior of mycli"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@mycli<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 注意这里不是click.command,这样就不需要后续调用add_command函数</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Initialize something."""</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">"Initialized the database"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@mycli<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""End something."""</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string">"Ended the process"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><table><thead><tr><th>终端输入</th><th>终端输出</th></tr></thead><tbody><tr><td>mycli</td><td>Running default behavior of mycli</td></tr><tr><td>mycli init</td><td>Initialized the database</td></tr><tr><td>mycli end</td><td>Ended the process</td></tr></tbody></table><h3 id="3-添加参数"><a href="#3-添加参数" class="headerlink" title="3.添加参数"></a>3.添加参数</h3><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> click<span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>argument</span><span class="token punctuation">(</span><span class="token string">'input_file'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span>click<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>exists<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 位置参数，必须存在该文件</span><span class="token comment"># click.Path参数可以对文件各方面检查，例如必须存在，可写入，不可以是目录等</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--output'</span><span class="token punctuation">,</span> <span class="token string">'-o'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'output.txt'</span><span class="token punctuation">,</span>  <span class="token comment"># 选项参数，短参数和长参数形式</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'输出文件路径，默认为output.txt'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--processes'</span><span class="token punctuation">,</span> <span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 类型转换和默认值</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'并发进程数，默认为1'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--verbose'</span><span class="token punctuation">,</span> <span class="token string">'-v'</span><span class="token punctuation">,</span> is_flag<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 布尔标志参数</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'启用详细输出模式'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--enable-feature'</span><span class="token punctuation">,</span> <span class="token string">'feature_flag'</span><span class="token punctuation">,</span>  <span class="token comment"># 参数别名映射到变量名</span>              flag_value<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'启用某个功能'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--color'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span>click<span class="token punctuation">.</span>Choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 限定可选值</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'颜色选择（red/green/blue）'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--debug/--no-debug'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment"># 互斥选项</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'启用或禁用调试模式'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--hidden-option'</span><span class="token punctuation">,</span> hidden<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment"># 隐藏参数（不在帮助信息显示）</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'这是一个隐藏参数'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--sizes'</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span>  <span class="token comment"># 接收多个参数值（这里固定3个整数）</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'输入三个尺寸，例如：--sizes 10 20 30'</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@click<span class="token punctuation">.</span>option</span><span class="token punctuation">(</span><span class="token string">'--threshold'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span>  <span class="token comment"># 必填参数</span>              <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'必须提供的阈值参数'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>input_file<span class="token punctuation">,</span> output<span class="token punctuation">,</span> processes<span class="token punctuation">,</span> verbose<span class="token punctuation">,</span> feature_flag<span class="token punctuation">,</span>          color<span class="token punctuation">,</span> debug<span class="token punctuation">,</span> hidden_option<span class="token punctuation">,</span> sizes<span class="token punctuation">,</span> threshold<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    一个演示click用法的示例程序    """</span>    <span class="token comment"># 打印所有参数值用于演示</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"输入文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>input_file<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"输出文件: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>output<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"进程数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>processes<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"详细模式: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'开启'</span> <span class="token keyword">if</span> verbose <span class="token keyword">else</span> <span class="token string">'关闭'</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"功能开关: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'开启'</span> <span class="token keyword">if</span> feature_flag <span class="token keyword">else</span> <span class="token string">'关闭'</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"颜色选择: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>color<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"调试模式: </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token string">'开启'</span> <span class="token keyword">if</span> debug <span class="token keyword">else</span> <span class="token string">'关闭'</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"隐藏参数值: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>hidden_option<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"尺寸参数: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sizes<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    click<span class="token punctuation">.</span>echo<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"阈值: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>threshold<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 这里可以添加实际的业务逻辑...</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><p><strong>优点：</strong></p><ul><li>采用装饰器，代码清楚易懂</li><li>功能十分强大，prompt，彩色输出等</li></ul><p><strong>缺点：</strong></p><ul><li>第三方库，需要额外下载</li><li>内容较为复杂，学习成本高</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python制作CLI基础_0</title>
    <link href="/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9CCLI%E5%9F%BA%E7%A1%80_0/"/>
    <url>/%E4%BD%BF%E7%94%A8python%E5%88%B6%E4%BD%9CCLI%E5%9F%BA%E7%A1%80_0/</url>
    
    <content type="html"><![CDATA[<p>主要学习使用python制作CLI两个主要方面的内容：</p><ol><li>利用toml文件打包python项目 <strong>（本篇内容）</strong></li><li>python中的命令行参数解析</li></ol><p>&nbsp;</p><h2 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h2><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">mypackage├── pyproject.toml |   # README.rst or README.md |   # LICENCE└── mypackage    ├── __init__.py    ├── main.py (假设其中的main函数为入口函数，即为命令行使用时调用的函数)    └── ... (other Python files)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上是大致的python项目结构，结构并非固定，包含基础文件即可</p><p><strong>toml</strong> 文件为安装打包所需的配置文件</p><p><strong>README</strong> 文件主要描述该工具的基本信息等，供使用者与后续开发者阅读</p><p>&nbsp;</p><h2 id="二、流程简述"><a href="#二、流程简述" class="headerlink" title="二、流程简述"></a>二、流程简述</h2><ol><li>创建一个python虚拟环境</li><li>编写py文件实现预期的逻辑功能</li><li>编写toml文件，记录依赖和入口函数等（后续介绍）</li><li>编写说明文档</li><li>运行 <code>pip install -e .</code></li></ol><blockquote><p>将上 <code>-e</code> 不需要每次修改代码后重新安装，如果是确定最终版本也可以去掉，其全称为 <code>--editable</code> </p><p>至此是本地安装为CLI的全部内容</p><p>以下是需要分发或上传的额外步骤</p></blockquote><ol start="6"><li><p>使用 <strong>pip</strong> 安装 <strong>build</strong> <code>pip install --upgrade build</code> </p></li><li><p>运行 <code>python -m build</code></p></li></ol><blockquote><p>运行该指令后将会生成一个 <code>dist</code> 文件夹并在其中生成 <code>tar.gz</code> 和 <code>.whl</code> 文件，可用于上传分发</p></blockquote><hr><p>整个流程适用于所有符合 <a href="https://peps.python.org/pep-0517/">PEP 517</a> 和 <a href="https://peps.python.org/pep-0660/">PEP 660</a> 标准的构建后端，无论你toml文件中指定是 <strong>setuptools</strong> 还是 <strong>hatch</strong> 只要配置正确均可执行</p><p>&nbsp;</p><h2 id="三、编写toml文件"><a href="#三、编写toml文件" class="headerlink" title="三、编写toml文件"></a>三、编写toml文件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token comment"># 项目元数据</span><span class="token punctuation">[</span><span class="token table class-name">project</span><span class="token punctuation">]</span><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"my_project"</span>  <span class="token comment"># 项目名称</span><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.1.0"</span>    <span class="token comment"># 项目版本</span><span class="token key property">description</span> <span class="token punctuation">=</span> <span class="token string">"A simple Python project"</span>  <span class="token comment"># 项目描述</span><span class="token key property">authors</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">"Your Name"</span><span class="token punctuation">,</span> <span class="token key property">email</span> <span class="token punctuation">=</span> <span class="token string">"your.email@example.com"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment"># 作者信息</span><span class="token punctuation">]</span><span class="token key property">license</span> <span class="token punctuation">=</span> <span class="token punctuation">&#123;</span> <span class="token key property">file</span> <span class="token punctuation">=</span> <span class="token string">"LICENSE"</span> <span class="token punctuation">&#125;</span>  <span class="token comment"># 许可证文件</span><span class="token key property">readme</span> <span class="token punctuation">=</span> <span class="token string">"README.md"</span>  <span class="token comment"># 项目说明文件</span><span class="token key property">requires-python</span> <span class="token punctuation">=</span> <span class="token string">">=3.8"</span>  <span class="token comment"># 支持的 Python 版本</span><span class="token key property">classifiers</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>  <span class="token comment"># PyPI 分类标签</span>    <span class="token string">"Development Status :: 3 - Alpha"</span><span class="token punctuation">,</span>    <span class="token string">"Intended Audience :: Developers"</span><span class="token punctuation">,</span>    <span class="token string">"License :: OSI Approved :: MIT License"</span><span class="token punctuation">,</span>    <span class="token string">"Programming Language :: Python :: 3"</span><span class="token punctuation">,</span>    <span class="token string">"Programming Language :: Python :: 3.8"</span><span class="token punctuation">,</span>    <span class="token string">"Programming Language :: Python :: 3.9"</span><span class="token punctuation">,</span>    <span class="token string">"Programming Language :: Python :: 3.10"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># 项目依赖</span><span class="token key property">dependencies</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>  <span class="token comment"># 项目运行时依赖</span>    <span class="token string">"requests>=2.25.0"</span><span class="token punctuation">,</span>    <span class="token string">"numpy>=1.20.0"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># 可选依赖（额外功能）</span><span class="token punctuation">[</span><span class="token table class-name">project.optional-dependencies</span><span class="token punctuation">]</span><span class="token key property">dev</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>  <span class="token comment"># 开发环境依赖</span>    <span class="token string">"pytest>=6.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"black>=21.0"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token key property">docs</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>  <span class="token comment"># 文档生成依赖</span>    <span class="token string">"sphinx>=4.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"sphinx-rtd-theme>=0.5.0"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment"># 项目脚本（命令行工具）</span><span class="token punctuation">[</span><span class="token table class-name">project.scripts</span><span class="token punctuation">]</span><span class="token key property">my-cli</span> <span class="token punctuation">=</span> <span class="token string">"mypackage.main:main"</span>  <span class="token comment"># 命令行工具入口点</span><span class="token comment"># 构建系统配置</span><span class="token punctuation">[</span><span class="token table class-name">build-system</span><span class="token punctuation">]</span><span class="token key property">requires</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">"setuptools>=61.0"</span><span class="token punctuation">,</span> <span class="token string">"wheel"</span><span class="token punctuation">]</span>  <span class="token comment"># 构建依赖</span><span class="token key property">build-backend</span> <span class="token punctuation">=</span> <span class="token string">"setuptools.build_meta"</span>  <span class="token comment"># 构建后端</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以上是一个toml文件的 <strong>基础</strong> 结构，当然还有许多其他的标签并未提及，例如你也可以在其中利用<code>[tool.pytest.ini_options]</code> 配置 <code>pytest</code> 的相关信息</p><p>&nbsp;</p><p>不同的构建后端还可以支持更加丰富的内容，例如 <strong>hatch</strong> 可以使用 <code>hatch new “myproject”</code> 命令初始化项目结构并自动生成toml文件部分内容</p><p>最后获得的 <strong>tar.gz</strong> 与 <strong>.whl</strong> 文件可以使用 <code>pip install **.tar.gz/**.whl</code> 安装也可以用 <strong>twine</strong> 上传至 <strong>pypi</strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu搭建饥荒专用服务器教程</title>
    <link href="/ubuntu%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/ubuntu%E6%90%AD%E5%BB%BA%E9%A5%A5%E8%8D%92%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><blockquote><p>游戏：饥荒联机版（Steam）</p><p>测试服务器：Ubuntu22.04 2核2G内存 3M带宽（京东云）</p><p>本次搭建是在完全纯净的ubuntu22.04系统上进行的，所以如果您保持一致，按照步骤即可搭建。</p><p>本文主要讲解搭建饥荒服务器，为了文章不臃肿，如何ssh连接远程服务器请自行前往浏览器或者b站学习，一般都有十分方便的软件。</p><p>本文中有不少链接，如果您对某一部分（例如steamcmd或者tmux）困惑或者感兴趣可以点击跳转，但是可能由于版本老旧存在问题，<strong>请勿盲目相信任何文章</strong>，例如steamcmd链接内容全面但是在安装方面<strong>lib32gcc1</strong>已经弃用但是文章未更新。</p><p>！！由于steamcmd目前需要32位依赖，本次搭建需要添加i386架构，如果服务器用于重要业务，请谨慎操作！！</p></blockquote><p>&nbsp;</p><h2 id="一、服务器配置"><a href="#一、服务器配置" class="headerlink" title="一、服务器配置"></a>一、服务器配置</h2><blockquote><p>由于我只测试了 <strong>2核2G内存3M带宽</strong> 服务器配置，所以在配置选择方面我主要是根据在本服务器上的体验和其他教程博客得到的估计总结，如果您想知道您需求下的准确配置，可以私信询问b站的各位饥荒区up主。</p></blockquote><p>我采用 <strong>2核2G内存3M带宽</strong> 配置，地面大小为中，洞穴大小为中，添加了八个史诗血量，Show Me，全球定位等辅助型mod，未添加大型内容方面的mod。</p><p>当服务器中人数为3人时，服务器性能显示大多为黄色，有时为绿色，网络大多数时候均为绿色，偶尔有一人为黄色，整体体验有时会有点点小卡顿，但是并不特别影响游戏体验。3人时内存使用率为**80%<strong>，cpu使用率为</strong>60%**。</p><p>但是本次测试只运行到第一个冬季初，后期可能内存占用率等会上升。因此，对于想要不添加许多大型mod或者只有五六人的小型服务器，推荐配置 <strong>2核4G内存</strong> （618京东云价格在250左右一年）。</p><h2 id="二、搭建"><a href="#二、搭建" class="headerlink" title="二、搭建"></a>二、搭建</h2><h3 id="1-安装-steamcmd"><a href="#1-安装-steamcmd" class="headerlink" title="1.安装 steamcmd"></a>1.安装 steamcmd</h3><blockquote><p><strong><a href="https://developer.valvesoftware.com/wiki/SteamCMD:zh-cn#Linux_Game_Server_Managers">steamcmd</a></strong> 是一个命令行版本的 Steam 客户端。它的主要用途是在一个命令行界面的 Steam 客户端上安装及更新各种可用的专用服务端。</p></blockquote><p>通过ssh连接服务器后，在服务器终端以root身份执行以下命令（# 带头的都是注释，不是要执行的命令）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token function">sudo</span> add-apt-repository multiverse <span class="token function">sudo</span> dpkg --add-architecture i386 <span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> lib32gcc-s1 steamcmd <span class="token comment"># 如果您的服务器是64位，先要按照上述指令添加 multiverse</span><span class="token comment"># 如果是32位直接sudo apt update后sudo apt install steamcmd </span><span class="token comment"># 此时可能会要求你输入密码，如果发现输入时终端无显示请不要慌张，这是正常的，为了保护密码的内容和长度信息</span><span class="token comment"># 中间出现红色页面，ok和选择agree回车即可</span><span class="token function">sudo</span> <span class="token function">apt</span> remove libcurl4-gnutls-dev<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libcurl4-gnutls-dev:i386<span class="token comment"># 因为两个包存在冲突，如果您已经下载libcurl4-gnutls-dev需要卸载安装i386版本</span>/usr/games/steamcmd<span class="token comment"># 这会花费一段时间安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>出现以下内容便说明安装好了</p><p><img src="https://s2.loli.net/2024/06/16/BeHwJFo1kXscL8R.png" alt="image-20240616114059249"></p><h3 id="2-安装-dontstarvetogether-dedicated-server"><a href="#2-安装-dontstarvetogether-dedicated-server" class="headerlink" title="2.安装 dontstarvetogether_dedicated_server"></a>2.安装 dontstarvetogether_dedicated_server</h3><p>在steamcmd中运行以下命令，如果您已经退出，在终端执行 <code>steamcmd</code> 即可进入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">login anonymous<span class="token comment"># 此为匿名登录，可能会因为网络问题出现失败（国内裸连steam抽风是正常的），你可以在服务器上设置代理，也可以多试几次（我试了两次就登上了）</span>force_install_dir ./dontstarvetogether_dedicated_serverapp_update <span class="token number">343050</span> validate<span class="token comment"># 安装，这会花费一段时间，请耐心等待</span><span class="token comment"># 安装过程中可能出现 Error! App '343050' state is 0x402 after update job. 错误</span><span class="token comment"># 这是网络不稳定，磁盘大小不足，缓存不足等多种问题导致的</span><span class="token comment"># 如果是网络不稳定，可以重新执行该命令或者退出steamcmd后重新进入重新按序执行</span>quit<span class="token comment"># 安装完成后退出steamcmd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>目前饥荒服务器底层部分安装完毕，相当于打好了地基</p><h3 id="3-导入地图配置"><a href="#3-导入地图配置" class="headerlink" title="3.导入地图配置"></a>3.导入地图配置</h3><ol><li>在创建游戏创建一个新世界（配置什么的按你正常玩来）</li></ol><p>&nbsp;</p><ol start="2"><li>在成功进入游戏后退出，在文件管理系统中找到该地图存档的文件夹，如果这个存档是第一个创建的文件夹名就是 <strong>Cluster_1</strong> ，第二个就是 <strong>Cluster_2</strong> ，以此类推。</li></ol><p>如果你的电脑有全局搜索工具，搜对应的文件夹名称即可，我的是ubuntu系统，文件夹在 <code>~/.kelei/DoNotStarveTogether/1231618362/</code> 下</p><p><img src="https://s2.loli.net/2024/06/16/NZ4FoVL7zXkMlqx.png" alt="image-20240616125015816"></p><ol start="3"><li>将找到的 <strong>Cluster_n</strong> 这个文件夹通过 <strong>SFTP</strong> 等方法上传至服务器</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.klei/DoNotStarveTogether<span class="token comment"># 创建~/.klei/DoNotStarveTogether文件夹</span><span class="token function">cp</span> <span class="token parameter variable">-R</span> Cluster_1/ ~/.klei/DoNotStarveTogether<span class="token comment"># 将上传的Cluster_1文件夹拷贝一份到~/.klei/DoNotStarveTogether文件夹下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="3"><li>在饥荒游戏主界面点击左下角的 <strong>帐号</strong> ，进入 <strong>Klei Account</strong> 界面后点击上方栏中的 <strong>游戏</strong></li></ol><p><img src="https://s2.loli.net/2024/06/16/5DdJU3qxfeSWP4m.png" alt="image-20240616125709025"></p><p>点击 <strong>《饥荒：联机版》的游戏服务器</strong> 按钮，复制服务器的序列号（如果没有请先添加新服务器）</p><ol start="5"><li>添加序列号</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.klei/DoNotStarveTogether/Cluster_1<span class="token comment"># 进入你上传的Cluster文件夹，~/.klei/DoNotStarveTogether/Cluster_1替换为你自己的文件夹位置</span><span class="token function">vim</span> cluster_token.txt<span class="token comment"># 这是通过vim编辑器编辑cluster_token.txt文件，如果没有会自动创建</span><span class="token comment"># 如果报错说没有安装vim,就执行 sudo apt install vim 安装，也可使用其他文本编辑器</span><span class="token comment"># 此时你进入了一个新的界面，若不熟悉vim请勿乱动</span><span class="token comment"># 1.如果你鼠标右键有Paste或者粘贴等字样请直接将序列号粘贴</span><span class="token comment"># 2.若没有，请按a（注意是否大写锁定！！）进入编辑模式，然后像正常文本编辑器一样将你的序列号手动输入，完成后按 Esc 退出编辑模式</span><span class="token comment"># 至此，你的第一行应该是一串序列号</span><span class="token comment"># 键盘输入 :wq 这三个字符然后回车，保存文件并退出至终端</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ps：如果序列号是从玩家a复制的，那么<strong>玩家a</strong>就默认是<strong>管理员</strong></p><ol start="6"><li>编写执行脚本</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span><span class="token comment"># 返回主文件夹</span><span class="token function">vim</span> start.sh<span class="token comment"># 创建并编辑start.sh文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>以下是 <strong>start.sh</strong> 文件中的内容，您要注意的只是最前面的四个赋值语句</p><p><strong>steamcmd_dir</strong> steamcmd可执行文件所在的位置</p><p><strong>install_dir</strong> 安装dontstarvetogether_dedicated_server的位置</p><p><strong>cluster_name</strong> 保存地图内容的文件夹名</p><p><strong>dontstarve_dir</strong> 保存地图内容的文件夹的保存位置，即 <strong>parent_path</strong> </p><blockquote><p>如果不知道位置，可以用 <code>find / -name &quot;file_or_dir_name&quot;</code> 搜索</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">steamcmd_dir</span><span class="token operator">=</span><span class="token string">"/usr/games/steamcmd"</span><span class="token assign-left variable">install_dir</span><span class="token operator">=</span><span class="token string">"/root/.local/share/Steam/steamcmd/dontstarvetogether_dedicated_server"</span><span class="token assign-left variable">cluster_name</span><span class="token operator">=</span><span class="token string">"Cluster_1"</span><span class="token assign-left variable">dontstarve_dir</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.klei/DoNotStarveTogether"</span><span class="token keyword">function</span> <span class="token function-name function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> Error: <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;2</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">check_for_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    fail <span class="token string">"Missing file: <span class="token variable">$1</span>"</span>    <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$steamcmd_dir</span>"</span> <span class="token operator">||</span> fail <span class="token string">"Missing <span class="token variable">$steamcmd_dir</span> directory!"</span>check_for_file <span class="token string">"steamcmd.sh"</span>check_for_file <span class="token string">"<span class="token variable">$dontstarve_dir</span>/<span class="token variable">$cluster_name</span>/cluster.ini"</span>check_for_file <span class="token string">"<span class="token variable">$dontstarve_dir</span>/<span class="token variable">$cluster_name</span>/cluster_token.txt"</span>check_for_file <span class="token string">"<span class="token variable">$dontstarve_dir</span>/<span class="token variable">$cluster_name</span>/Master/server.ini"</span>check_for_file <span class="token string">"<span class="token variable">$dontstarve_dir</span>/<span class="token variable">$cluster_name</span>/Caves/server.ini"</span>check_for_file <span class="token string">"<span class="token variable">$install_dir</span>/bin"</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$install_dir</span>/bin"</span> <span class="token operator">||</span> fail<span class="token assign-left variable">run_shared</span><span class="token operator">=</span><span class="token punctuation">(</span>./dontstarve_dedicated_server_nullrenderer<span class="token punctuation">)</span><span class="token assign-left variable">run_shared</span><span class="token operator">+=</span><span class="token punctuation">(</span>-console<span class="token punctuation">)</span><span class="token assign-left variable">run_shared</span><span class="token operator">+=</span><span class="token punctuation">(</span>-cluster <span class="token string">"<span class="token variable">$cluster_name</span>"</span><span class="token punctuation">)</span><span class="token assign-left variable">run_shared</span><span class="token operator">+=</span><span class="token punctuation">(</span>-monitor_parent_process <span class="token variable">$$</span><span class="token punctuation">)</span><span class="token assign-left variable">run_shared</span><span class="token operator">+=</span><span class="token punctuation">(</span>-shard<span class="token punctuation">)</span><span class="token string">"<span class="token variable">$&#123;run_shared<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> Caves <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^/Caves: /'</span> <span class="token operator">&amp;</span><span class="token string">"<span class="token variable">$&#123;run_shared<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span> Master <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^/Master: /'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>保存退出后执行</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /root/.local/share/Steam/steamcmd/dontstarvetogether_dedicated_server<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> start.sh<span class="token comment"># 更改文件权限</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>此时，你若在终端执行 <code>./start.sh</code> ，即运行 <strong>start.sh</strong> 脚本，待加载完毕，你就可以在大厅搜索到你的房间了！！！！</p><p><strong>但是</strong>，还是不够的，因为你会发现房间是纯净档，mod不见了？！并且当你关闭ssh连接，运行的脚本会被强制中断！！服务器将断开连接！！</p><p>同时，如何添加管理员？如何设置白名单？如何禁止投票？</p><p>别急，都会在后文讲到</p><h2 id="三、添加mod"><a href="#三、添加mod" class="headerlink" title="三、添加mod"></a>三、添加mod</h2><p>如果你创建时勾选了mod,在 <strong>Cluster_n</strong> 文件夹（就是上文上传的那个文件夹）的 <strong>Master</strong> 文件夹下有个 <strong>modoverrides.lua</strong> 文件，其中内容类似：</p><figure><div class="code-wrapper"><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token string">"workshop-1185229307"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token string">"configuration_options"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span><span class="token string">"CAMERA"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"DAMAGE_NUMBERS"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"DAMAGE_RESISTANCE"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"FRAME_PHASES"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"GLOBAL"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"GLOBAL_NUMBERS"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"HEADER_CLIENT"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"HEADER_SERVER"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"HORIZONTAL_OFFSET"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"TAG"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"EPIC"</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"TRANSLATOR"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token string">"WETNESS_METER"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">false</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"enabled"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">"workshop-1418746242"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span><span class="token string">"configuration_options"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span><span class="token string">"clearfont"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"eventplus"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"extratrans"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"enabled"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">true</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个是你勾选的mod的配置文件，例如第一个 <strong>workshop-1185229307</strong> ，实际就是史诗血量mod，而 <strong>1185229307</strong> 就是该mod的ID号。</p><p><strong>接下来</strong> ，将进行添加mod操作：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首先，如果你还在运行start.sh脚本，请 Ctrl+c 中止</span><span class="token builtin class-name">cd</span> /root/.local/share/Steam/steamcmd/dontstarvetogether_dedicated_server/mods<span class="token function">vim</span> dedicated_server_mods_setup.lua<span class="token comment"># 此时打住，先别动</span><span class="token comment"># 阅读文件中的注释就知道，我们需要ServerModSetup或ServerModCollectionSetup函数来初始化我们的mod,即告诉服务器应该下载哪些mod,前者用于初始化单个mod,后者用于合集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>接下来，打开你本地电脑的记事本，新建一个txt文件，对照着你的modoverrides.lua内容，一行一个ServerModSetup函数，函数内为mod的ID号。</p><p>比如我上文的lua内容，我的txt文件内容应该为：</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ServerModSetup(&quot;1185229307&quot;)ServerModSetup(&quot;1418746242&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>lua中有两个mod,我勾选了两个mod,那么这就是两个ServerModSetup函数。</p><p><strong>接着</strong>，复制txt文件内容，粘贴至刚刚打开的dedicated_server_mods_setup.lua文件</p><p>形如：</p><p><img src="https://s2.loli.net/2024/06/16/PvAmNjRlWqE6dzb.png" alt="image-20240616165324100"></p><p>接着同样的，按 <strong>:wq 回车</strong> 保存退出</p><p>此时，若再去运行start.sh脚本，等待加载（由于要下载mod这次加载时间会较长），大厅搜索发现房间的mod加上了！</p><blockquote><p>如果出现显示mod只有部分，那是因为下载mod失败（依旧是网络问题。。），重新运行脚本即可（一次不行就多几次），下载好了以后运行就不用这么麻烦了。</p></blockquote><h2 id="四、后台运行"><a href="#四、后台运行" class="headerlink" title="四、后台运行"></a>四、后台运行</h2><p>还有一个困扰，如果我们关闭ssh连接，由于终端被关闭，运行在终端的start.sh脚本也被杀死，服务器强行退出。但是我们总不能一直连着ssh吧？为此，我们可以采用 <strong>tmux</strong> 这一命令行工具实现脚本的后台运行。（只要能后台运行即可，tmux使用方便，所以用它）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tmux<span class="token comment"># 如果未安装先安装tmux</span>tmux new <span class="token parameter variable">-s</span> game_server<span class="token comment"># 创建一个session,game_server是session的名字，可自取，最好英文</span><span class="token comment"># 接下来你会进入一个新终端（运行在背景的终端）</span><span class="token comment"># 在该终端下启动start.sh脚本</span><span class="token comment"># 检查没有问题后先按 ctrl+b 后按 d 退出这个终端（实际上是隐藏，它依旧在运行）</span><span class="token comment"># 此时，你若断开ssh连接，服务器依旧运行！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">tmux更多内容</a></p><h2 id="五、额外配置"><a href="#五、额外配置" class="headerlink" title="五、额外配置"></a>五、额外配置</h2><blockquote><p>更改以下配置最好先终止脚本，关闭服务器</p></blockquote><h3 id="1-用户Id"><a href="#1-用户Id" class="headerlink" title="1.用户Id"></a>1.用户Id</h3><p>在配置之前，我们先了解如何获得<strong>Klei用户ID</strong></p><p>在饥荒联机版游戏中，点击左下角 <strong>帐号</strong> ，点击 弹出窗口上方 <strong>用户信息</strong> ，你就可以看到你的 <strong>Klei用户ID</strong> 了</p><h3 id="2-管理员"><a href="#2-管理员" class="headerlink" title="2.管理员"></a>2.管理员</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.klei/DoNotStarveTogether/Cluster_1<span class="token comment"># 来到Cluster_1文件夹</span><span class="token function">vim</span> adminlist.txt<span class="token comment"># 创建或编辑adminlist.txt文件</span><span class="token comment"># 将所有管理员的Klei用户ID粘贴进去，一行一个</span><span class="token comment"># 保存退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-白名单"><a href="#3-白名单" class="headerlink" title="3.白名单"></a>3.白名单</h3><p>我开了一个服务器，有6个位置，但是每次我自己都挤不进去，这时就需要<strong>白名单</strong>了</p><p>打开 <strong>Cluster_n</strong> 下的 <strong>cluster.ini</strong> 文件，这个就是该档的基础配置文件，内容大致如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">GAMEPLAY</span><span class="token punctuation">]</span></span><span class="token key attr-name">game_mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">survival //endless无尽模式 survival生存 wilderness荒野</span><span class="token key attr-name">max_players</span> <span class="token punctuation">=</span> <span class="token value attr-value">6 //人数</span><span class="token key attr-name">pvp</span> <span class="token punctuation">=</span> <span class="token value attr-value">false //PVP玩家互怼,true开,false关</span><span class="token key attr-name">pause_when_empty</span> <span class="token punctuation">=</span> <span class="token value attr-value">true //没人的时候暂停,true开,false关</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">NETWORK</span><span class="token punctuation">]</span></span><span class="token key attr-name">cluster_description</span> <span class="token punctuation">=</span> <span class="token value attr-value">abababa //服务器描述</span><span class="token key attr-name">cluster_name</span> <span class="token punctuation">=</span> <span class="token value attr-value">某某某的世界 //服务器名字</span><span class="token key attr-name">cluster_intention</span> <span class="token punctuation">=</span> <span class="token value attr-value">cooperative //服务器分类,默认可以不用修改</span><span class="token key attr-name">cluster_password</span> <span class="token punctuation">=</span> <span class="token value attr-value">123 // 服务器进入密码</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">MISC</span><span class="token punctuation">]</span></span><span class="token key attr-name">console_enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true //服务器能否使用控制台,true开,false关</span><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">SHARD</span><span class="token punctuation">]</span></span><span class="token key attr-name">shard_enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">true //启用分层世界,true开,false关默认即可,关闭不可用洞穴</span><span class="token key attr-name">bind_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1 //分层世界绑定连接地址,默认即可</span><span class="token key attr-name">master_ip</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1 //分层世界主世界地址,默认即可</span><span class="token key attr-name">master_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">10889 //分层世界连接端口,可根据你有几个世界修改</span><span class="token key attr-name">cluster_key</span> <span class="token punctuation">=</span> <span class="token value attr-value">supersecretkey //分层世界相互连接的密码,这个一定得改,改成自己的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>在 <strong>NETWORK</strong> 部分加入以下内容：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">whitelist_slots</span><span class="token punctuation">=</span> <span class="token value attr-value">1 //白名单功能 设置成2 就是留2个位置，3就是留3个位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>保存退出后，创建 <strong>whitelist.txt</strong> 文件，和管理员一样，你想给谁预留位置就一人一行他的科雷Id。</p><h3 id="4-禁止投票"><a href="#4-禁止投票" class="headerlink" title="4.禁止投票"></a>4.禁止投票</h3><p>在 <strong>cluster.ini</strong> 文件的 <strong>GAMEPLAY</strong> 部分添加：</p><figure><div class="code-wrapper"><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">vote_enabled</span> <span class="token punctuation">=</span> <span class="token value attr-value">false //投票功能,true开,false关</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>&nbsp;</p><p>&nbsp;</p><p>至此，便是Ubuntu服务器搭建饥荒联机服务器的全部内容了，祝大家游戏愉快，欢迎指正和补充讨论！</p><p>&nbsp;</p><blockquote><p>参考文章：</p><p><a href="https://developer.huawei.com/consumer/cn/forum/topic/0204144946165984055?fid=0101592429757310384">教你用Ubuntu快速搭建饥荒服务器</a></p><p><a href="https://www.xiongtianqi.cn/thread-301238-1-1.html">饥荒服务器配置</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>typescript组件中的默认属性</title>
    <link href="/typescript%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E5%B1%9E%E6%80%A7/"/>
    <url>/typescript%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><p>我们经常会使用到<strong>默认参数</strong>，例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int sum(int a, int b &#x3D; 1)&#123;    return a+b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>而在前端的 <strong>js&#x2F;ts</strong> 中组件也有 <strong>默认属性</strong> 的概念。 <em>javascript</em> 的默认属性比较容易实现，与 <em>c++</em> 等类似。</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 以下js的默认属性实现代码参考react官网</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getImageUrl <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./utils.js'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> person<span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">50</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>img      className<span class="token operator">=</span><span class="token string">"avatar"</span>      src<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token function">getImageUrl</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>      alt<span class="token operator">=</span><span class="token punctuation">&#123;</span>person<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span>      width<span class="token operator">=</span><span class="token punctuation">&#123;</span>size<span class="token punctuation">&#125;</span>      height<span class="token operator">=</span><span class="token punctuation">&#123;</span>size<span class="token punctuation">&#125;</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Avatar        size<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">&#125;</span>        person<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Katsuko Saruhashi'</span><span class="token punctuation">,</span>           <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">'YfeOqp2'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Avatar        size<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">80</span><span class="token punctuation">&#125;</span>        person<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Aklilu Lemma'</span><span class="token punctuation">,</span>           <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">'OKS67lh'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Avatar        person<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>           <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lin Lanying'</span><span class="token punctuation">,</span>          <span class="token literal-property property">imageId</span><span class="token operator">:</span> <span class="token string">'1bX5QH6'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>但是由于 <em>typescript</em> 对类型的严格限制等原因， 网上有不少对其默认属性的实现，但是基本采用了 <em>interface</em> 实现，代码较为复杂。</p><p><a href="https://dev.to/bytebodger/default-props-in-react-typescript-2o5o">Default Props in React&#x2F;TypeScript</a> 这篇文章对 <em>typescript</em> 中的默认属性的实现进行了十分详细的讨论。</p><p>这里我介绍一种默认属性的实现方法，较为简单，目前也未出现问题。</p><figure><div class="code-wrapper"><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// 第一种方法</span><span class="token keyword">const</span> <span class="token function-variable function">Square</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props <span class="token operator">:</span> <span class="token punctuation">&#123;</span>value <span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"square"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>value <span class="token operator">?</span> props<span class="token punctuation">.</span>value <span class="token operator">:</span> <span class="token string">"No"</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token comment">// 第二种方法</span><span class="token keyword">const</span> <span class="token function-variable function">Square</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props <span class="token operator">:</span> <span class="token punctuation">&#123;</span>value <span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>value <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> props  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">"square"</span><span class="token operator">></span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
    <tags>
      
      <tag>react</tag>
      
      <tag>typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>neo4j的导入与导出</title>
    <link href="/neo4j%E7%9A%84%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/"/>
    <url>/neo4j%E7%9A%84%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><p>&nbsp;</p><blockquote><p>本文主要介绍neo4j的导入（import,load）和导出（export）,基本是基于csv和dump文件格式。将会介绍在终端和使用apoc利用Cypher语言两种情况如何实现导入导出,同时也会大致讲讲所需的csv文件的格式。并且所有的导入导出操作都是在终端或neo4j浏览器界面，并未使用编程语言。</p></blockquote><p>&nbsp;</p><p>我的版本配置：</p><blockquote><ul><li><strong>操作系统</strong>:<strong>ubuntu22.04</strong></li><li><strong>neo4j</strong><strong>server</strong>:<strong>5.10.0社区版</strong></li><li><strong>apoc-core</strong>:<strong>5.10.1</strong>(这是个neo4j插件，之后会讲到)</li></ul></blockquote><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><h2 id="1-终端下导入导出"><a href="#1-终端下导入导出" class="headerlink" title="1. 终端下导入导出"></a>1. 终端下导入导出</h2><p>（ubuntu ctrl +alt +T 打开终端）。</p><p>与neo4j相关的命令基本是以<strong>neo4j</strong>,<strong>neo4j-admin</strong>或者<strong>neo4j-admin server</strong>开头，三者在后面添加 <code>-h</code>都可以查看其帮助文档。</p><p><img src="https://s2.loli.net/2023/08/09/vNZE4nUGx9Ck3Ba.png"></p><p>而我们需要的命令就是<strong>neo4j-admin database</strong></p><p>我们使用 <code>neo4j-admin database -h</code>来查看<strong>neo4j-admin database</strong>的使用方法。</p><p><img src="https://s2.loli.net/2023/08/09/ZR2kAgm3IWtoMwj.png"></p><p>而我们要用的就是<strong>dump</strong>,<strong>load</strong>,<strong>import</strong></p><p>&nbsp;</p><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a><a href="https://neo4j.com/docs/operations-manual/current/backup-restore/offline-backup/">dump</a></h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 其中&lt;>是必填选项其余的[]是非必填</span><span class="token comment"># 可以使用neo4j-admin database dump -h查看各参数详细信息</span><span class="token comment"># 效果是将neo4j的数据导出为一个dump文件，或者一个标准输出流进入类似load的命令</span>neo4j-admin database dump <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--expand-commands<span class="token punctuation">]</span>                          <span class="token punctuation">[</span>--verbose<span class="token punctuation">]</span> <span class="token punctuation">[</span>--overwrite-destination<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token operator">|</span>false<span class="token punctuation">]</span><span class="token punctuation">]</span>                          <span class="token punctuation">[</span>--additional-config<span class="token operator">=</span><span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">]</span>                          <span class="token punctuation">[</span>--to-path<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token operator">|</span> --to-stdout<span class="token punctuation">]</span>                          <span class="token operator">&lt;</span>database<span class="token operator">></span>                <span class="token comment"># --verbose: 加上后会在执行过程中输出详细的过程，方便了解其过程查看可能的错误点</span><span class="token comment"># --overwrite-destination: 如果做后dump文件位置存在同名文件，是否覆盖，默认是false</span><span class="token comment"># --to-path=&lt;path>： 指定输出文件夹地址。注意！path必须为文件夹地址</span><span class="token comment"># --to-stdout: 让输出成为标准输出流而不是一个dump文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><p>其中，如果你命令中既没有 <code>--to-path</code>也没有 <code>--to-stdout</code>，那么，它将会采用Configuration文件（<a href="https://neo4j.com/docs/operations-manual/current/configuration/file-locations/">各操作系统下的neo4j默认文件地址</a>）中的 <code>server.directories.dumps.root</code>设置。</p><p>该设置值是一个文件路径，指dump文件存放的地址。</p><p>如果是相对路径，则是以 <strong>neo4j主目录&#x2F;data&#x2F;<strong>为基准的相对路径。例如 <code>server.directories.dumps.root</code>的默认值就是</strong>dumps</strong>，即如果你命令中既没有 <code>--to-path</code>也没有 <code>--to-stdout</code>，该命令将会在 <strong>neo4j主目录&#x2F;data&#x2F;dumps&#x2F;</strong> 下生成一个dump文件。</p><blockquote><p><em>如果使用 <code>neo4j-admin database dump</code>来导出数据，要确保neo4j数据库处于stop状态</em></p><p><em><code>neo4j status</code>查看当前neo4j运行状态</em></p></blockquote><p>&nbsp;</p><h3 id="load"><a href="#load" class="headerlink" title="load"></a><a href="https://neo4j.com/docs/operations-manual/current/backup-restore/restore-dump/">load</a></h3><p><strong>load</strong>方法主要就是将<strong>dump</strong>导出的 <em>dump文件</em> 或者 <em>标准输出流</em> 中的数据重新导入neo4j数据库中。所以，load+dump就可以实现neo4j的<strong>离线备份</strong>。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># load和dump的Options大同小异，</span><span class="token comment"># 同样的，如果既没有--from-path，又没有--from-stdin，会采用server.directories.dumps.root</span>neo4j-admin database load <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>--expand-commands<span class="token punctuation">]</span> <span class="token punctuation">[</span>--info<span class="token punctuation">]</span> <span class="token punctuation">[</span>--verbose<span class="token punctuation">]</span><span class="token punctuation">[</span>--overwrite-destination<span class="token punctuation">[</span><span class="token operator">=</span>true<span class="token operator">|</span>false<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>--additional-config<span class="token operator">=</span><span class="token operator">&lt;</span>file<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--from-path<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span> <span class="token operator">|</span> --from-stdin<span class="token punctuation">]</span> <span class="token operator">&lt;</span>database<span class="token operator">></span><span class="token comment"># 有一个特殊的Option --info</span><span class="token comment"># 如果你加上了这个选项，那么这个命令将不会将数据导入到neo4j数据库中</span><span class="token comment"># 而是打印出这个数据的详细信息</span><span class="token comment"># example</span>$ <span class="token function">sudo</span> neo4j-admin database load --from-path<span class="token operator">=</span>/home/mmy intelligentmedicine.db <span class="token parameter variable">--verbose</span><span class="token comment"># 这里由于没选覆盖选项是新建一个数据库为intelligentmedicine.db</span><span class="token comment"># 注意！path只要写到dump文件所在的文件夹就行，dump文件必须是&lt;databasename>.dump</span><span class="token comment"># 这里就是 intelligentmedicine.db.dump</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><p><em>与dump有些不同的是，load支持neo4j在线和离线状态的导入（付费版），但是两种都有要注意的地方</em></p><ol><li>如果你打算覆盖原有的数据库，即–overwrite-destination设置成了true，那么你<strong>一定</strong>要先<strong>stop</strong>再执行load语句。</li><li>如果你打算新建一个数据库来存储你load的数据，那么无需离线，但是在<strong>load之后一定要create一个新的database</strong>。</li><li><strong>社区版</strong>的neo4j不支持在线导入，只能关闭服务后导入（付费版没试，但是官方文档说load支持online，应该是指付费版）</li><li><strong>社区版</strong>的load不支持<strong>增量导入</strong>，即要么覆盖要么新建数据库，不能在原有数据上加入。（付费版没试，不知道行不行）</li></ol><blockquote><p><a href="https://neo4j.com/docs/cypher-manual/current/administration/databases/">neo4j创建数据库官方文档</a></p><p>ps: 社区版即免费的neo4j是<strong>只允许一个database</strong>，但是我们可以通过修改配置文件来实现<strong>多个</strong>database共存。但是也有缺点，每次切换数据库要restart，并且修改配置文件（这个简单，就加个#，删个#）。如果有空会分享一下。</p></blockquote><p>&nbsp;</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a><a href="https://neo4j.com/docs/operations-manual/current/tutorial/neo4j-admin-import/">import</a></h3><blockquote><p><em>The import command is used for loading large amounts of data from CSV files and supports full and incremental import into a running or stopped Neo4j DBMS.</em></p><p>上述是官方原话，但是测试发现社区版import只支持全量导入（full）并且只能离线，可能付费才能增量与在线导入。</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Usage: neo4j-admin database import [-h] [COMMAND]</span><span class="token comment"># example</span>$ <span class="token function">sudo</span> neo4j-admin database <span class="token function">import</span> full <span class="token parameter variable">--verbose</span> --overwrite-destination<span class="token operator">=</span>true <span class="token parameter variable">--nodes</span> /home/mmy/forimport_movie_nodes.csv  <span class="token parameter variable">--nodes</span> /home/mmy/forimport_person_nodes.csv  <span class="token parameter variable">--relationships</span> /home/mmy/forimport_rels.csv  test.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p> &nbsp;</p><h4 id="csv格式"><a href="#csv格式" class="headerlink" title="csv格式"></a>csv格式</h4><p>import命令本身并没有什么好说的，我们来聊聊导入所需的csv文件格式。</p><h5 id="a-存储nodes的csv文件"><a href="#a-存储nodes的csv文件" class="headerlink" title="a.存储nodes的csv文件"></a>a.存储nodes的csv文件</h5><p><strong>表头（header）</strong></p><ul><li>表头格式&lt;name&gt;:&lt;field_type&gt;</li><li>label在表头并非必须，但是id一定要有</li><li>如果你不想让id加入你的属性值，可以不给它属性名（name），即把下表的movieid去掉。</li></ul><table><thead><tr><th>movieid:ID</th><th>year:int</th><th>:LABEL</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><ul><li>但是如果是增量或者批量导入，规则就有点复杂。<strong>主键的属性必须是标签与属性的结合</strong></li></ul><table><thead><tr><th>uuid:ID{label:Person}</th><th>name:STRING{label:Person}</th><th>email:STRING</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>在这里，<strong>uuid</strong>和n<strong>ame共同做主键</strong>区分节点，并且指定节点导入的<strong>label</strong>为<strong>Person</strong></p><p><strong>这一措施，主要是防止增量导入和批量导入时创建多个重复节点。</strong></p><p>&nbsp;</p><h5 id="b-存储relationship的csv文件"><a href="#b-存储relationship的csv文件" class="headerlink" title="b.存储relationship的csv文件"></a>b.存储relationship的csv文件</h5><p><strong>表头</strong></p><p>存储关系的表头必须包含**:START_ID<strong>，</strong>:END_ID<strong>和</strong>:TYPE<strong>。其中前两个分别对应着关系的</strong>起始实体<strong>和</strong>结束实体<strong>的</strong>:ID<strong>，这就是为什么实体id是必须的。而</strong>:TYPE**是指明这个关系的类型。</p><p>当然，关系也可以有属性，下图便是给关系增加了一个<strong>role</strong>属性</p><table><thead><tr><th>：START_ID</th><th>:END_ID</th><th>:TYPE</th><th>role</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>&nbsp;</p><blockquote><p><strong>总结</strong>：在社区版，如果使用终端的方法，我们都无法实现在线操作与增量导入。而官方其实还有一种方法，使用Cypher命令load csv可以实现在线导入数据，csv文件地址可以是url形式。(<a href="https://neo4j.com/developer/guide-import-csv/)%E5%A4%A7%E5%AE%B6%E5%8F%AF%E4%BB%A5%E8%87%AA%E8%A1%8C%E6%9F%A5%E7%9C%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%8C%E6%9C%89%E6%A0%B7%E4%BE%8B%E5%8D%81%E5%88%86%E8%AF%A6%E7%BB%86%E3%80%82">https://neo4j.com/developer/guide-import-csv/)大家可以自行查看官方文档，有样例十分详细。</a></p></blockquote><p>&nbsp;</p><p>&nbsp;</p><h2 id="2-利用apoc插件在线导出"><a href="#2-利用apoc插件在线导出" class="headerlink" title="2. 利用apoc插件在线导出"></a>2. 利用apoc插件在线导出</h2><hr><p><a href="https://neo4j.com/docs/apoc/current/">apoc-core</a></p><p><a href="https://neo4j.com/labs/apoc/5/">apoc-extended</a></p><p><a href="https://neo4j.com/docs/apoc/current/export/">apoc_export</a></p><p>apoc在neo4j 5.0之后分为apoc-core和apoc-extended两部分。前者是neo4j官方支持，后者由社区维护。</p><p>而由于apoc-extended最新只有5.9版本，作者neo4j为5.10.x，所以下文只使用了apoc-core。而extended在导入导出方面增加了可使用exel导入导出，可以导入html格式的数据，多样化导入csv文件。</p><p>apoc本质是一个插件，其内容十分丰富，远不止导入导出数据那么简单，大家如有需要可以查看上方的官方文档。</p><p>&nbsp;</p><h3 id="2-1-apoc的安装与配置"><a href="#2-1-apoc的安装与配置" class="headerlink" title="2.1 apoc的安装与配置"></a>2.1 apoc的安装与配置</h3><p>apoc默认状态下并未安装，所以我们要先安装。</p><h4 id="apoc-core的安装"><a href="#apoc-core的安装" class="headerlink" title="apoc-core的安装"></a>apoc-core的安装</h4><p>这个十分简单，在**$NEO4J_HOME&#x2F;labs**文件夹（NEO4J_HOME表示neo4j主目录）中，你会找到一个jar文件。</p><p><img src="https://s2.loli.net/2023/08/09/RACvOsangpDluyX.png" alt="image-20230808103615755"></p><p>将这个文件复制到**$NEO4J_HOME&#x2F;plugins<strong>文件夹下，</strong>apoc-core**就算安装好了！</p><h4 id="apoc-core配置"><a href="#apoc-core配置" class="headerlink" title="apoc-core配置"></a>apoc-core配置</h4><p>a.首先，找到你的neo4j配置文件<strong>neo4j.conf</strong>，neo4j各文件在各操作系统的地址官方文档给出了，链接在前文。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 寻找并修改以下设置，推荐复制粘贴原有的然后去掉注释的#，再修改，方便之后还原默认设置# 放宽apoc权限dbms.security.procedures.unrestricted&#x3D;apoc.*,algo.*# 将apoc的全部都加入allowlistdbms.security.procedures.allowlist&#x3D;apoc.*,apoc.coll.*,apoc.load.*,gds.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>b.之后在neo4j.conf同文件夹下创建一个apoc.conf文件，这个是apoc的配置文件，是要自己手动创建的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none"># 加入下面三条设置# 开启文件导出功能apoc.export.file.enabled&#x3D;true# 开启文件导入功能apoc.import.file.enabled&#x3D;true# 指明是否使用 neo4j.conf 指定的相关（导入导出涉及的）目录(默认就是 true)apoc.import.file_use_neo4j_config&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><p>好了，接下来我们就可以使用apoc-core来导入导出了。</p><p>&nbsp;</p><p>&nbsp;</p><h3 id="2-2-导出为csv文件"><a href="#2-2-导出为csv文件" class="headerlink" title="2.2 导出为csv文件"></a>2.2 导出为csv文件</h3><p><strong>注意</strong>：这次启动方式<strong>不是neo4j start</strong>而是<strong>neo4j console</strong>，而只有这种启动才能顺利使用apoc</p><p>neo4j官方只能导出数据为dump或stream，而apoc让我们有了更多选择。</p><p><a href="https://neo4j.com/docs/apoc/current/export/csv/">apoc.export.csv</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token string">"movies.csv"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 短短一句，就可将你的全部nodes和relationships导出成一个csv文件</span><span class="token comment">// 而由于我们在apoc.conf文件中第三条设置为TRUE，所以导出的文件将位于noe4j的import文件夹下</span><span class="token comment">// 当然你也可以将设置改为false，并且给出文件的绝对路径，来自定义文件的导出位置</span><span class="token comment">// 注意！！修改设置后noe4j可以在你电脑上任意位置输出文件，注意文件导出地址安全性，别写在不该写的地方！</span>               <span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>stream<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 这样你的文件将导出成一个stream</span>                      <span class="token keyword">MATCH</span> <span class="token punctuation">(</span>person<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token keyword">WHERE</span> person<span class="token punctuation">.</span>name <span class="token keyword">STARTS</span> <span class="token keyword">WITH</span> <span class="token string">"L"</span><span class="token keyword">WITH</span> <span class="token function">collect</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token keyword">AS</span> people<span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"movies-l.csv"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token keyword">RETURN</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token comment">// 这样，我们就可以选择性的导出nodes</span><span class="token comment">// 同时，我们注意到 apoc.export.csv.data第一个参数为nodes，第二个其实是relationships</span><span class="token comment">// 而哪怕这里不导出关系，我们依旧要写一个[]保留位置，就和config参数的&#123;&#125;一样</span>                <span class="token keyword">MATCH</span> <span class="token punctuation">(</span>person<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span>actedIn<span class="token operator">:</span><span class="token relationship property">ACTED_IN</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token punctuation">(</span>movie<span class="token operator">:</span><span class="token class-name">Movie</span><span class="token punctuation">)</span><span class="token keyword">WITH</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> person<span class="token punctuation">)</span> <span class="token keyword">AS</span> people<span class="token punctuation">,</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> movie<span class="token punctuation">)</span> <span class="token keyword">AS</span> movies<span class="token punctuation">,</span> <span class="token function">collect</span><span class="token punctuation">(</span>actedIn<span class="token punctuation">)</span> <span class="token keyword">AS</span> actedInRels<span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>people <span class="token operator">+</span> movies<span class="token punctuation">,</span> actedInRels<span class="token punctuation">,</span> <span class="token string">"movies-actedIn.csv"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token keyword">RETURN</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token comment">// 我们选择性的导出了nodes和relationships</span>                           <span class="token keyword">WITH</span> "<span class="token keyword">MATCH</span> path <span class="token operator">=</span> <span class="token punctuation">(</span>person<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">DIRECTED</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token punctuation">(</span>movie<span class="token punctuation">)</span>      <span class="token keyword">RETURN</span> person<span class="token punctuation">.</span>name <span class="token keyword">AS</span> name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>born <span class="token keyword">AS</span> born<span class="token punctuation">,</span>             movie<span class="token punctuation">.</span>title <span class="token keyword">AS</span> title<span class="token punctuation">,</span> movie<span class="token punctuation">.</span>tagline <span class="token keyword">AS</span> tagline<span class="token punctuation">,</span> movie<span class="token punctuation">.</span>released <span class="token keyword">AS</span> released" <span class="token keyword">AS</span> query<span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">"movies-directed.csv"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token keyword">RETURN</span> file<span class="token punctuation">,</span> source<span class="token punctuation">,</span> format<span class="token punctuation">,</span> nodes<span class="token punctuation">,</span> relationships<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> time<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> batchSize<span class="token punctuation">,</span> batches<span class="token punctuation">,</span> done<span class="token punctuation">,</span> data<span class="token punctuation">;</span><span class="token comment">//这是一个与之前不同的方法，在这里我们传入的不是nodes或relationships，而是一个语句，这样子看上去简单多了</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>大家或许注意到了，上述许多语句{}中的内容不是stream:true就是空的，其实，这里面可以设置很多配置</p><p>如下所示：</p><p><img src="https://s2.loli.net/2023/08/09/unIXg3w9VOToxEN.png" alt="image-20230808204348546"></p><p><strong>但是</strong>，其中的<strong>bulkImport</strong>设置只有在all和graph情况下才能生效：</p><p><img src="https://s2.loli.net/2023/08/09/pvPhyGdFDw8fBoT.png" alt="image-20230808204725076"></p><p>&nbsp;</p><h3 id="2-3导出为json文件"><a href="#2-3导出为json文件" class="headerlink" title="2.3导出为json文件"></a>2.3导出为json文件</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token comment">// 基本与csv相同</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span>json<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">(</span><span class="token string">"all.json"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>useTypes<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// useTypes参数表明输出时是否表明type类型是node还是relationship</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// out</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"born"</span><span class="token operator">:</span><span class="token string">"2015-07-04T19:32:24"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Adam"</span><span class="token punctuation">,</span><span class="token property">"place"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"crs"</span><span class="token operator">:</span><span class="token string">"wgs-84"</span><span class="token punctuation">,</span><span class="token property">"latitude"</span><span class="token operator">:</span><span class="token number">13.1</span><span class="token punctuation">,</span><span class="token property">"longitude"</span><span class="token operator">:</span><span class="token number">33.46789</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token property">"male"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"kids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Sam"</span><span class="token punctuation">,</span><span class="token string">"Anna"</span><span class="token punctuation">,</span><span class="token string">"Grace"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"relationship"</span><span class="token punctuation">,</span><span class="token property">"label"</span><span class="token operator">:</span><span class="token string">"KNOWS"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bffSince"</span><span class="token operator">:</span><span class="token string">"P5M1DT12H"</span><span class="token punctuation">,</span><span class="token property">"since"</span><span class="token operator">:</span><span class="token number">1993</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"start"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"born"</span><span class="token operator">:</span><span class="token string">"2015-07-04T19:32:24"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Adam"</span><span class="token punctuation">,</span><span class="token property">"place"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"crs"</span><span class="token operator">:</span><span class="token string">"wgs-84"</span><span class="token punctuation">,</span><span class="token property">"latitude"</span><span class="token operator">:</span><span class="token number">13.1</span><span class="token punctuation">,</span><span class="token property">"longitude"</span><span class="token operator">:</span><span class="token number">33.46789</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token property">"male"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"kids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Sam"</span><span class="token punctuation">,</span><span class="token string">"Anna"</span><span class="token punctuation">,</span><span class="token string">"Grace"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"end"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><h3 id="2-4导出为Cypher语句"><a href="#2-4导出为Cypher语句" class="headerlink" title="2.4导出为Cypher语句"></a>2.4导出为Cypher语句</h3><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span>cypher<span class="token punctuation">.</span><span class="token function">schema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> format<span class="token punctuation">,</span> time<span class="token punctuation">,</span> cypherStatements<span class="token keyword">RETURN</span> format<span class="token punctuation">,</span> time<span class="token punctuation">,</span> cypherStatements<span class="token punctuation">;</span><span class="token comment">// 也与csv大同小异，多了一个schema，这个就支持导出索引以及所有的限制条件的建立，而不仅仅是一些数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><h3 id="2-5导出为graphml文件"><a href="#2-5导出为graphml文件" class="headerlink" title="2.5导出为graphml文件"></a>2.5导出为graphml文件</h3><blockquote><p><em>The export GraphML procedures export data into a format that’s used by other tools like Gephi and CytoScape to read graph data.</em></p><p>主要是导出给Gephi 使用</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token comment">// example</span><span class="token keyword">call</span> apoc<span class="token punctuation">.</span>export<span class="token punctuation">.</span>graphml<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'MATCH (start:Foo)-[:KNOWS]->(:Bar) RETURN start'</span><span class="token punctuation">,</span> <span class="token string">'queryNodesFoo.graphml'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useTypes<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- out --></span><span class="token prolog">&lt;?xml version='1.0' encoding='UTF-8'?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>graphml</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://graphml.graphdrawing.org/xmlns<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>born<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token attr-name">attr.name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>born<span class="token punctuation">"</span></span> <span class="token attr-name">attr.type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token attr-name">attr.name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">attr.type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>place<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token attr-name">attr.name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>place<span class="token punctuation">"</span></span> <span class="token attr-name">attr.type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>node<span class="token punctuation">"</span></span> <span class="token attr-name">attr.name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span> <span class="token attr-name">attr.type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>graph</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>G<span class="token punctuation">"</span></span> <span class="token attr-name">edgedefault</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>directed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n0<span class="token punctuation">"</span></span> <span class="token attr-name">labels</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:Foo:Foo0:Foo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>:Foo:Foo0:Foo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>born<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2018-10-10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>place<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;"crs":"wgs-84-3d","latitude":12.78,"longitude":56.7,"height":100.0&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n3<span class="token punctuation">"</span></span> <span class="token attr-name">labels</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:Foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>:Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>zzz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>n5<span class="token punctuation">"</span></span> <span class="token attr-name">labels</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>:Foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>labels<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>:Foo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>node</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>graph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>graphml</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><p>&nbsp;</p><blockquote><p>apoc-extended 的导入还支持导入excel文件，但是不能是最新的5.10版本的neo4j。</p></blockquote><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><h2 id="3-利用apoc在线导入"><a href="#3-利用apoc在线导入" class="headerlink" title="3.利用apoc在线导入"></a>3.利用apoc在线导入</h2><hr><p><a href="https://neo4j.com/docs/apoc/current/">apoc-core</a></p><p><a href="https://neo4j.com/labs/apoc/5/">apoc-extended</a></p><h3 id="3-1-从Web-APIs导入"><a href="#3-1-从Web-APIs导入" class="headerlink" title="3.1 从Web-APIs导入"></a>3.1 从Web-APIs导入</h3><blockquote><p><em>As <code>apoc.import.file.use_neo4j_config</code> is enabled, the procedures check whether file system access is allowed and possibly constrained to a specific directory by reading the two configuration parameters <code>dbms.security.allow_csv_import_from_file_urls</code> and <code>server.directories.import</code> respectively. If you want to remove these constraints please set <code>apoc.import.file.use_neo4j_config=false</code></em></p></blockquote><p>如果 <code>apoc.import.file.use_neo4j_config</code>设置为true，文件写入可能会有所限制。可以设为false，但是要注意安全性。</p><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token comment">// example，可以用url导入数据</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token string">'http://example.com/test.xml'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'xPath'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">YIELD</span> value <span class="token keyword">as</span> doc <span class="token keyword">CREATE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> p<span class="token punctuation">.</span>name <span class="token operator">=</span> doc<span class="token punctuation">.</span>name  <span class="token comment">// 还可以从google cloud storage导入数据导入数据，但是要另外加一堆插件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><h3 id="3-2-load-csv文件"><a href="#3-2-load-csv文件" class="headerlink" title="3.2 load csv文件"></a>3.2 load csv文件</h3><p>这是需安装apoc-extended，比较实用，提一下。</p><blockquote><ul><li>provide a line number</li><li>provide both a map and a list representation of each line</li><li>automatic data conversion (including split into arrays)</li><li>option to keep the original string formatted values</li><li>ignoring fields (makes it easier to assign a full line as properties)</li><li>headerless files</li><li>replacing certain values with null</li></ul></blockquote><p> 上述便是apoc在load csv方面相对官方方法的改进</p><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> lineNo<span class="token punctuation">,</span> map<span class="token punctuation">,</span> list<span class="token keyword">RETURN</span> <span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> map <span class="token keyword">as</span> row <span class="token keyword">return</span> row<span class="token keyword">CREATE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token keyword">SET</span> p <span class="token operator">=</span> row<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>多种配置任你选择：</p><p><img src="https://s2.loli.net/2023/08/09/Ln6vM7k2oIEURwm.png" alt="image-20230809102037522"></p><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token keyword">skip</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">limit</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> header<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> ignore<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   mapping<span class="token operator">:</span><span class="token punctuation">&#123;</span>     age<span class="token operator">:</span> <span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'int'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     beverage<span class="token operator">:</span> <span class="token punctuation">&#123;</span>array<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> arraySep<span class="token operator">:</span><span class="token string">';'</span><span class="token punctuation">,</span> name<span class="token operator">:</span><span class="token string">'drinks'</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> lineNo<span class="token punctuation">,</span> map<span class="token punctuation">,</span> list<span class="token keyword">RETURN</span> <span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 其中地一个设置是针对文件的，第二个是针对读入的map</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><h3 id="3-3-导入excel文件"><a href="#3-3-导入excel文件" class="headerlink" title="3.3 导入excel文件"></a>3.3 导入excel文件</h3><p>这个是在安装apoc-extended基础下的，因为比较常用了，稍微提一下。但是因为支持该功能的文件太大了，所以apoc将其分离出去了，你需另外下载支持文件安装到plugins文件夹下。</p><blockquote><p>For loading XLS we’re using the Apache POI library, which works well with old and new Excel formats, but is quite large. That’s why we decided not to include it into the apoc jar, but make it an optional dependency.</p><p>These dependencies are included in <a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/5.9.0/apoc-xls-dependencies-5.9.0-all.jar">apoc-xls-dependencies-5.9.0-all.jar</a>, which can be downloaded from the <a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/5.9.0">releases page</a>. Once that file is downloaded, it should be placed in the <code>plugins</code> directory and the Neo4j Server restarted.</p><p><strong>Alternatively</strong>, you can download these jars from Maven Repository (putting them into <code>plugins</code> directory as well):</p><p>For XLS files:</p><ul><li><a href="https://repo1.maven.org/maven2/org/apache/poi/poi/5.1.0/poi-5.1.0.jar">poi-5.1.0.jar</a></li></ul><p>Additional for XLSX files:</p><ul><li><a href="https://repo1.maven.org/maven2/org/apache/commons/commons-collections4/4.4/commons-collections4-4.4.jar">commons-collections4-4.4.jar</a></li><li><a href="https://repo1.maven.org/maven2/org/apache/poi/poi-ooxml/5.1.0/poi-ooxml-5.1.0.jar">poi-ooxml-5.1.0.jar</a></li><li><a href="https://repo1.maven.org/maven2/org/apache/poi/poi-ooxml-lite/5.1.0/poi-ooxml-lite-5.1.0.jar">poi-ooxml-lite-5.1.0.jar</a></li><li><a href="https://repo1.maven.org/maven2/org/apache/xmlbeans/xmlbeans/5.0.2/xmlbeans-5.0.2.jar">xmlbeans-5.0.2.jar</a></li><li><a href="https://repo1.maven.org/maven2/com/github/virtuald/curvesapi/1.06/curvesapi-1.06.jar">curvesapi-1.06.jar</a></li></ul></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token comment">// 同样简单明了</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token function">xls</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Name <span class="token keyword">of</span> sheet<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>config<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">// 这里是'Full',整个文件全导入</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token function">xls</span><span class="token punctuation">(</span><span class="token string">'file:///path/to/file.xls'</span><span class="token punctuation">,</span><span class="token string">'Full'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>mapping<span class="token operator">:</span><span class="token punctuation">&#123;</span>Integer<span class="token operator">:</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'int'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Array<span class="token operator">:</span><span class="token punctuation">&#123;</span>type<span class="token operator">:</span><span class="token string">'int'</span><span class="token punctuation">,</span>array<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>arraySep<span class="token operator">:</span><span class="token string">';'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                                                               <span class="token comment">// 至于导入后再怎么处理，其实就和导入csv后处理一样，官方文档看一下load csv相关文档即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>config格式如下：</p><p><img src="https://s2.loli.net/2023/08/09/XZM1UFAmkbGdew7.png" alt="image-20230809103254865"></p><p>&nbsp;</p><h3 id="3-4-import-csv文件"><a href="#3-4-import-csv文件" class="headerlink" title="3.4 import csv文件"></a>3.4 import csv文件</h3><p>在apoc中，<strong>load</strong>和<strong>import</strong>其实是有一定区别的。</p><p><strong>load</strong>是导入neo4j类似缓存中，可以做后续操作后再导入neo4j数据库中（当然，也可以不导入）</p><p><strong>import</strong>是运行后就将数据存储入数据库中。</p><p>&nbsp;</p><p>而在apoc-core官方文档中提到：只要是满足apoc的csv文件格式规则的，就可以使用 <code>apoc.import.csv</code>来导入数据，但是对于大型数据，他们更推荐官方的import方式。（就是上文提到的终端下的 <code>neo4j-admin database import</code>）</p><p>&nbsp;</p><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher"><span class="token comment">// apoc.import.csv(&lt;nodes>, &lt;relationships>, &lt;config>)</span><span class="token comment">// 其中nodes和relationships都是以list，即[]的形式传入</span><span class="token comment">// 而list中单个node或relationship又以map的形式传入</span><span class="token comment">// &lt;nodes>: [&#123;fileName: 'file:/persons.csv', labels: ['Teacher','Student']&#125;]</span><span class="token comment">// 传入文件，以及文件中所含的标签</span><span class="token comment">// &lt;relationships>: [&#123;fileName:'file:/...',type:'KNOWS'&#125;]</span><span class="token comment">// 传入文件以及关系的type</span><span class="token comment">//注意！！map的关键字（key）一定要严格按照上方写，fileName写成filename就会出错！！</span><span class="token comment">// example</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span>import<span class="token punctuation">.</span><span class="token keyword">csv</span><span class="token punctuation">(</span>  <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>fileName<span class="token operator">:</span> <span class="token string">'file:/persons.csv'</span><span class="token punctuation">,</span> labels<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'Person'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>fileName<span class="token operator">:</span> <span class="token string">'file:/knows.csv'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'KNOWS'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>delimiter<span class="token operator">:</span> <span class="token string">'|'</span><span class="token punctuation">,</span> arrayDelimiter<span class="token operator">:</span> <span class="token string">','</span><span class="token punctuation">,</span> stringIds<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>config中可选配置如下：</p><p><img src="https://s2.loli.net/2023/08/20/eAjxtrqD2yCGz68.png" alt="image-20230812113109487"></p><p>&nbsp;</p><h3 id="3-5-导入json文件"><a href="#3-5-导入json文件" class="headerlink" title="3.5 导入json文件"></a>3.5 导入json文件</h3><ul><li><strong>apoc.load.json()</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher">apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>urlOrKeyOrBinary <span class="token operator">:</span><span class="token operator">:</span> ANY?<span class="token punctuation">,</span> path <span class="token operator">=</span>  <span class="token operator">:</span><span class="token operator">:</span> STRING?<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">:</span><span class="token operator">:</span> MAP?<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">:</span><span class="token operator">:</span> MAP?<span class="token punctuation">)</span><span class="token comment">// apoc.load.json</span><span class="token comment">// 其中的path可以使用jsonPath，来指定导入内容</span><span class="token comment">//example</span><span class="token keyword">CALL</span> apoc<span class="token punctuation">.</span><span class="token keyword">load</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token string">"file:///person.json"</span><span class="token punctuation">)</span><span class="token keyword">YIELD</span> value<span class="token keyword">MERGE</span> <span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> value<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">SET</span> p<span class="token punctuation">.</span>age <span class="token operator">=</span> value<span class="token punctuation">.</span>age<span class="token keyword">WITH</span> p<span class="token punctuation">,</span> value<span class="token keyword">UNWIND</span> value<span class="token punctuation">.</span>children <span class="token keyword">AS</span> child<span class="token keyword">MERGE</span> <span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> child<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">MERGE</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">:</span><span class="token relationship property">CHILD_OF</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>config:</p><p><img src="https://s2.loli.net/2023/08/20/KzAPO42uxgt8l3y.png" alt="image-20230815205853386"></p><ul><li><strong>apoc.import.json()</strong></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-cypher" data-language="cypher"><code class="language-cypher">apoc<span class="token punctuation">.</span>import<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>urlOrBinaryFile Any<span class="token punctuation">,</span> config Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment">// import和load不一样，load后是要将数据进行后续操作，不一定保存到数据库中</span><span class="token comment">// import的作用就是将数据导入</span><span class="token comment">// 而通过观察import的signature我们可以发现，它不接受path参数，</span><span class="token comment">// 这意味着import只能整个文件导入，那么这个文件要求保持一定格式规范，最好是通过apoc导出的json文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>导入的json文件样例:</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"born"</span><span class="token operator">:</span><span class="token string">"2015-07-04T19:32:24"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Adam"</span><span class="token punctuation">,</span><span class="token property">"place"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"crs"</span><span class="token operator">:</span><span class="token string">"wgs-84"</span><span class="token punctuation">,</span><span class="token property">"latitude"</span><span class="token operator">:</span><span class="token number">13.1</span><span class="token punctuation">,</span><span class="token property">"longitude"</span><span class="token operator">:</span><span class="token number">33.46789</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token property">"male"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"kids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Sam"</span><span class="token punctuation">,</span><span class="token string">"Anna"</span><span class="token punctuation">,</span><span class="token string">"Grace"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"node"</span><span class="token punctuation">,</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"relationship"</span><span class="token punctuation">,</span><span class="token property">"label"</span><span class="token operator">:</span><span class="token string">"KNOWS"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"bffSince"</span><span class="token operator">:</span><span class="token string">"P5M1DT12H"</span><span class="token punctuation">,</span><span class="token property">"since"</span><span class="token operator">:</span><span class="token number">1993</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"start"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"born"</span><span class="token operator">:</span><span class="token string">"2015-07-04T19:32:24"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Adam"</span><span class="token punctuation">,</span><span class="token property">"place"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"crs"</span><span class="token operator">:</span><span class="token string">"wgs-84"</span><span class="token punctuation">,</span><span class="token property">"latitude"</span><span class="token operator">:</span><span class="token number">13.1</span><span class="token punctuation">,</span><span class="token property">"longitude"</span><span class="token operator">:</span><span class="token number">33.46789</span><span class="token punctuation">,</span><span class="token property">"height"</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token property">"male"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token property">"kids"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"Sam"</span><span class="token punctuation">,</span><span class="token string">"Anna"</span><span class="token punctuation">,</span><span class="token string">"Grace"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token property">"end"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token property">"labels"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"User"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Jim"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>config：</p><p><img src="https://s2.loli.net/2023/08/20/kazcpEDhY3Iu69P.png" alt="image-20230819083810885"></p><p><img src="https://s2.loli.net/2023/08/20/Pgyr457X1MLF86Y.png" alt="image-20230819083839427"></p><p>&nbsp;</p><p>apoc-core还支持导入<strong>xml</strong>文件和<strong>graphml</strong>，与前面的json等基本一致，这里就不介绍了，大家可以看一下官方文档。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><h2 id="4-复制数据库秘籍——复制文件夹大法"><a href="#4-复制数据库秘籍——复制文件夹大法" class="headerlink" title="4. 复制数据库秘籍——复制文件夹大法"></a>4. 复制数据库秘籍——复制文件夹大法</h2><p>当我们要将海量的数据从一个neo4j数据库导入另一台计算机的neo4j数据库时，如果采用上述的办法，或许要等非常长的时间。此时我们就可以直接复制文件。</p><p>具体步骤如下：</p><ol><li>假设我们<strong>被复制</strong>的数据库的名字为<strong>Data.db</strong>。</li><li>打开需要复制数据的电脑（即数据源）的 <strong>neo4j主目录&#x2F;data&#x2F;</strong> ，在其目录下有两个文件夹，<strong>databases</strong>和<strong>transactions</strong>。在这两个数据夹下各有一个<strong>Data.db</strong>文件夹，这就是neo4j的<strong>Data.db</strong>数据库存储的数据。</li><li>拷贝这两个文件夹到需要导入的电脑，放置在同样的目录下。<em><strong>注意！</strong></em>一定要放在同样的目录下，由于两个文件夹是同名的，所以注意别放错了地方。</li><li>新建database，我推荐是和<strong>被复制</strong>的数据库同名，即<strong>Data.db</strong>。这个我个人试过，肯定没问题。你也可以试试建一个<strong>myData.db</strong>，然后把那两个文件夹重命名为<strong>myData.db</strong>。</li></ol><p>提示：可能会在复制粘贴文件夹时提示无权限修改或权限不足一类的，linux操作系统可以在终端中使用 <code>sudo mv -i 所需复制的文件 目的地</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>neo4j</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu（22.04）中的常见问题及解决</title>
    <link href="/ubuntu%E4%B8%AD%E7%9A%84n%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <url>/ubuntu%E4%B8%AD%E7%9A%84n%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>&nbsp;</p><h2 id="chrome浏览器无法显示文本或显示不全"><a href="#chrome浏览器无法显示文本或显示不全" class="headerlink" title="chrome浏览器无法显示文本或显示不全"></a>chrome浏览器无法显示文本或显示不全</h2><hr><p><img src="https://s2.loli.net/2023/08/07/PVuB7JAeIwkogED.png" alt="img"></p><p><a href="https://askubuntu.com/questions/1469580/ubuntu-22-04-chrome-broswer-cant-see-any-text-or-image-content-after-update">Ask For Ubuntu</a></p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.config/google-chrome/Default<span class="token function">rm</span> <span class="token parameter variable">-rf</span> GPUCache/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>&nbsp;</strong></p><h2 id="腾讯会议提示由于窗口协议是“wayland”-所以无法使用"><a href="#腾讯会议提示由于窗口协议是“wayland”-所以无法使用" class="headerlink" title="腾讯会议提示由于窗口协议是“wayland”,所以无法使用"></a>腾讯会议提示由于窗口协议是“wayland”,所以无法使用</h2><hr><p><strong>version（3.15.0）</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找到 /opt/wemeet/wemeetapp.sh</span>$ <span class="token builtin class-name">cd</span> /opt/wemeet/<span class="token comment"># 暂时改一下权限 </span>$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> wemeetapp.sh<span class="token comment">#也可以直接记事本打开，主要是要编辑</span>$ <span class="token function">vim</span> wemeetapp.sh<span class="token comment"># 找到  if [ "$XDG_SESSION_TYPE" = "wayland" ];then  这一行</span>‘’‘ 在这一行前面加上：<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">XDG_SESSION_TYPE</span></span><span class="token operator">=</span>x11<span class="token builtin class-name">export</span> <span class="token assign-left variable">QT_QPA_PLATFORM</span><span class="token operator">=</span>xcb<span class="token builtin class-name">unset</span> WAYLAND_DISPLAY保存后关闭’‘’<span class="token comment"># 安全起见，改回只读权限</span>$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">444</span> wemeetapp.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>2023.7.29</p><p>刚刚发现刚更新的3.15.1使用上述方法后会出现图标消失，点击无反映的问题，目前未找到解决办法。我直接回退到3.15.0用老办法，等大佬提出解决办法再解决吧</p><p>&nbsp;</p><h2 id="unzip解压后中文文件名乱码"><a href="#unzip解压后中文文件名乱码" class="headerlink" title="unzip解压后中文文件名乱码"></a>unzip解压后中文文件名乱码</h2><hr><p><a href="https://www.zhihu.com/question/20523036">参考文章</a></p><p>这是因为unzip命令解压缩是默认使用<strong>utf-8</strong>编码，而文件可能使用了其他编码方式，导致文件名乱码</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">unzip</span> <span class="token parameter variable">-O</span> cp936 filename.zip <span class="token parameter variable">-d</span> filedirname <span class="token comment"># 这里用了cp936编码，如果仍有乱码可以多试试其他编码或者去询问该文件分享者使用的压缩方式从而确定它的编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>&nbsp;</p><h2 id="ubuntu安装下载steam"><a href="#ubuntu安装下载steam" class="headerlink" title="ubuntu安装下载steam"></a>ubuntu安装下载steam</h2><hr><blockquote><p><em>（更新时间：2023-08-24）</em></p></blockquote><p>ubuntu安装下载steam主要有三种方式：</p><ol><li>snap安装</li><li>使用deb包安装（本人没试过此方法，这里不作具体介绍，deb包官网可获得）</li><li>使用apt安装（推荐）</li></ol><p>之所以推荐使用apt安装是因为它的更新管理十分方便:</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端执行下面两条指令即可更新升级你用apt下载的所有软件包了</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> update$ <span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>但是</strong>，要注意steam的apt安装不是简单的 <code>sudo apt install steam</code>，这可能会存在依赖丢失，更新时公钥缺失的问题，下文介绍的apt安装方法是steam官方提供的方法。</p><p>接下来，我就来介绍这三种下载方法</p><h3 id="1-snap安装"><a href="#1-snap安装" class="headerlink" title="1.snap安装"></a>1.snap安装</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开终端</span>$ <span class="token function">sudo</span> snap <span class="token function">install</span> steam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>当然，你可以使用ubuntu 22.04上的<strong>图形化界面（ubuntu software）</strong>来下载安装。</p><p>其实使用snap安装是最快的安装方式，但是，snap本身在ubuntu用户中并不是十分常用，它具有一些软件包大启动缓慢等问题。</p><p>而<strong>snap</strong>中的steam版本是<strong>1.0.0.76</strong>，<strong>apt</strong>中是<strong>1.0.0.78</strong>，apt上的版本也要更加新一些。</p><h3 id="2-apt安装"><a href="#2-apt安装" class="headerlink" title="2.apt安装"></a>2.apt安装</h3><p>参考了<a href="https://repo.steampowered.com/steam/">steam官方apt下载方法</a></p><p>下载<a href="https://repo.steampowered.com/steam/archive/stable/steam.gpg">steam.gpg</a>文件，并将其放置于*&#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;steam.gpg*</p><p>接下来，打开终端执行如下操作：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/steam-stable.list <span class="token operator">&lt;&lt;</span><span class="token string">'EOF'# 此命令是向steam-stable.list文件追加内容deb [arch=amd64,i386 signed-by=/usr/share/keyrings/steam.gpg] https://repo.steampowered.com/steam/ stable steamdeb-src [arch=amd64,i386 signed-by=/usr/share/keyrings/steam.gpg] https://repo.steampowered.com/steam/ stable steamEOF</span><span class="token comment"># 这是追加的内容</span>$ <span class="token function">sudo</span> dpkg --add-architecture i386$ <span class="token function">sudo</span> <span class="token function">apt-get</span> update$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\</span>  libgl1-mesa-dri:amd64 <span class="token punctuation">\</span>  libgl1-mesa-dri:i386 <span class="token punctuation">\</span>  libgl1-mesa-glx:amd64 <span class="token punctuation">\</span>  libgl1-mesa-glx:i386 <span class="token punctuation">\</span>  steam-launcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装完成，打开steam设置的兼容性开启为所有产品使用steam play，你就可以获得与windows下几乎一样的游戏体验！</p><p>（ps ：有谁知道ubuntu除了复制粘贴怎么在steam客户端及游戏中输入中文的可以在评论区分享一下，谢谢！）</p>]]></content>
    
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
